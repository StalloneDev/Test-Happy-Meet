{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SidebarService {\n  constructor() {\n    this.isCollapsed = new BehaviorSubject(false);\n    this.isCollapsed$ = this.isCollapsed.asObservable();\n  }\n  toggleSidebar() {\n    this.isCollapsed.next(!this.isCollapsed.value);\n  }\n  getIsCollapsed() {\n    return this.isCollapsed.value;\n  }\n  static {\n    this.ɵfac = function SidebarService_Factory(t) {\n      return new (t || SidebarService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SidebarService,\n      factory: SidebarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","SidebarService","constructor","isCollapsed","isCollapsed$","asObservable","toggleSidebar","next","value","getIsCollapsed","factory","ɵfac","providedIn"],"sources":["c:\\react\\test\\formation-dashboard\\src\\app\\services\\sidebar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidebarService {\n  private isCollapsed = new BehaviorSubject<boolean>(false);\n  isCollapsed$ = this.isCollapsed.asObservable();\n\n  toggleSidebar() {\n    this.isCollapsed.next(!this.isCollapsed.value);\n  }\n\n  getIsCollapsed() {\n    return this.isCollapsed.value;\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAIU,KAAAC,WAAW,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACzD,KAAAI,YAAY,GAAG,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE;;EAE9CC,aAAaA,CAAA;IACX,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC,CAAC,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;EAChD;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,WAAW,CAACK,KAAK;EAC/B;;;uBAVWP,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAS,OAAA,EAAdT,cAAc,CAAAU,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}